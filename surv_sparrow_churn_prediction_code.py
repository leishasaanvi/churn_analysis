# -*- coding: utf-8 -*-
"""surv_sparrow_churn_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10PMTUxlfUULMgKJpI8K6eieRFT_ohl7R
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go

df=pd.read_csv('/content/WA_Fn-UseC_-Telco-Customer-Churn.csv')
df

df.columns

df.dtypes

df.info()

df.shape

df.isnull().sum()

df.describe()

df.duplicated().sum()

df['TotalCharges'] = pd.to_numeric(df['TotalCharges'])

"""CATEGORICAL COLUMNS EXPLORATION"""

gender_counts = df['gender'].value_counts()
x = gender_counts.index
y = gender_counts.values

fig, ax = plt.subplots(figsize=(8, 8))

#pie chart
pal = sns.color_palette("Set2", len(gender_counts))
ax.pie(y, labels=x, colors=pal, autopct='%1.1f%%')

#legend and title
plt.legend(bbox_to_anchor=(1, 1))
plt.suptitle('Gender of People', weight='bold')
plt.show()

"""senior citizen

"""

senior_counts = df['SeniorCitizen'].value_counts()
x = senior_counts.index
y = senior_counts.values

fig, ax = plt.subplots(1, 2, figsize=(15, 8))

#bar plot
sns.set(style="dark", color_codes=True)
pal = sns.color_palette( "Set2",len(senior_counts))
sns.barplot(x=x, y=y, palette=pal[::-1], ax=ax[0])

for p in ax[0].patches:
    ax[0].annotate(f'{p.get_height():.0f}', (p.get_x() + p.get_width() / 2., p.get_height()))

ax[0].set_xlabel('SeniorCitizen')

#pie chart
ax[1].pie(y, labels=x, colors=pal, autopct='%1.1f%%')

# legend and title
plt.legend(bbox_to_anchor=(1, 1))
plt.suptitle('SeniorCitizen', weight='bold')
plt.show()

partner_counts = df['Partner'].value_counts()
x = partner_counts.index
y = partner_counts.values

fig, ax = plt.subplots(1, 2, figsize=(15, 8))

#bar plot
sns.set(style="dark", color_codes=True)
pal = sns.color_palette("Set2", len(partner_counts))
sns.barplot(x=x, y=y, palette=pal[::-1], ax=ax[0])
for p in ax[0].patches:
    ax[0].annotate(f'{p.get_height():.0f}', (p.get_x() + p.get_width() / 2., p.get_height()))

ax[0].set_xlabel('Partner')

#pie chart
ax[1].pie(y, labels=x, colors=pal, autopct='%1.1f%%')

#legend and title
plt.legend(bbox_to_anchor=(1, 1))
plt.suptitle('Partner', weight='bold')
plt.show()

dependents_counts = df['Dependents'].value_counts()
x = dependents_counts.index
y = dependents_counts.values

fig, ax = plt.subplots(1, 2, figsize=(15, 8))

#bar plot
sns.set(style="dark", color_codes=True)
pal = sns.color_palette("Set2", len(dependents_counts))
sns.barplot(x=x, y=y, palette=pal[::-1], ax=ax[0])

for p in ax[0].patches:
    ax[0].annotate(f'{p.get_height():.0f}', (p.get_x() + p.get_width() / 2., p.get_height()))

ax[0].set_xlabel('Dependents')

#pie chart
ax[1].pie(y, labels=x, colors=pal, autopct='%1.1f%%')

#legend and title
plt.legend(bbox_to_anchor=(1, 1))
plt.suptitle('Dependents')
plt.show()

phone_service_counts = df['PhoneService'].value_counts()
x = phone_service_counts.index
y = phone_service_counts.values

fig, ax = plt.subplots(1, 2, figsize=(15, 8))

#bar plot
sns.set(style="dark", color_codes=True)
pal = sns.color_palette("Set2", len(phone_service_counts))
sns.barplot(x=x, y=y, palette=pal[::-1], ax=ax[0])

for p in ax[0].patches:
    ax[0].annotate(f'{p.get_height():.0f}', (p.get_x() + p.get_width() / 2., p.get_height()),)

ax[0].set_xlabel('PhoneService')

#pie chart
ax[1].pie(y, labels=x, colors=pal, autopct='%1.1f%%')

#legend and title
plt.legend(bbox_to_anchor=(1, 1))
plt.suptitle('PhoneService')
plt.show()

multiple_lines_counts = df['MultipleLines'].value_counts()
x = multiple_lines_counts.index
y = multiple_lines_counts.values

fig, ax = plt.subplots(1, 2, figsize=(15, 8))

#bar plot
sns.set(style="dark", color_codes=True)
pal = sns.color_palette("Set2", len(multiple_lines_counts))
sns.barplot(x=x, y=y, palette=pal[::-1], ax=ax[0])

for p in ax[0].patches:
    ax[0].annotate(f'{p.get_height():.0f}', (p.get_x() + p.get_width() / 2., p.get_height()))

ax[0].set_xlabel('MultipleLines')

#pie chart
ax[1].pie(y, labels=x, colors=pal, autopct='%1.1f%%')

#legend and title
plt.legend(bbox_to_anchor=(1, 1))
plt.suptitle('MultipleLines')
plt.show()

internet_service_counts = df['InternetService'].value_counts()
x = internet_service_counts.index
y = internet_service_counts.values

fig, ax = plt.subplots(1, 2, figsize=(15, 8))

#bar plot
sns.set(style="dark", color_codes=True)
pal = sns.color_palette("Set2", len(internet_service_counts))
sns.barplot(x=x, y=y, palette=pal[::-1], ax=ax[0])

for p in ax[0].patches:
    ax[0].annotate(f'{p.get_height():.0f}', (p.get_x() + p.get_width() / 2., p.get_height()))

ax[0].set_xlabel('Internet Service Type')

#pie chart
ax[1].pie(y, labels=x, colors=pal, autopct='%1.1f%%')

#legend and title
plt.legend(bbox_to_anchor=(1, 1))
plt.suptitle('Internet Service Type')
plt.show()

online_security_counts = df['OnlineSecurity'].value_counts()
x = online_security_counts.index
y = online_security_counts.values

fig, ax = plt.subplots(1, 2, figsize=(15, 8))

#bar plot
sns.set(style="dark", color_codes=True)
pal = sns.color_palette("Set2", len(online_security_counts))
sns.barplot(x=x, y=y, palette=pal[::-1], ax=ax[0])

for p in ax[0].patches:
    ax[0].annotate(f'{p.get_height():.0f}', (p.get_x() + p.get_width() / 2., p.get_height()))

ax[0].set_xlabel('OnlineSecurity')

#pie chart
ax[1].pie(y, labels=x, colors=pal, autopct='%1.1f%%')

#legend and title
plt.legend(bbox_to_anchor=(1, 1))
plt.suptitle('OnlineSecurity')
plt.show()

online_backup_counts = df['OnlineBackup'].value_counts()
x = online_backup_counts.index
y = online_backup_counts.values

fig, ax = plt.subplots(1, 2, figsize=(15, 8))


#bar plot
sns.set(style="dark", color_codes=True)
pal = sns.color_palette("Set2", len(online_backup_counts))
sns.barplot(x=x, y=y, palette=pal[::-1], ax=ax[0])

for p in ax[0].patches:
    ax[0].annotate(f'{p.get_height():.0f}', (p.get_x() + p.get_width() / 2., p.get_height()))

ax[0].set_xlabel('OnlineBackup')

#pie chart
ax[1].pie(y, labels=x, colors=pal, autopct='%1.1f%%')

#legend and title
plt.legend(bbox_to_anchor=(1, 1))
plt.suptitle('OnlineBackup')
plt.show()

device_protection_counts = df['DeviceProtection'].value_counts()
x = device_protection_counts.index
y = device_protection_counts.values

fig, ax = plt.subplots(1, 2, figsize=(15, 8))

#bar plot
sns.set(style="dark", color_codes=True)
pal = sns.color_palette("Set2", len(device_protection_counts))
sns.barplot(x=x, y=y, palette=pal[::-1], ax=ax[0])

for p in ax[0].patches:
    ax[0].annotate(f'{p.get_height():.0f}', (p.get_x() + p.get_width() / 2., p.get_height()))

ax[0].set_xlabel('Device Protection')

#pie chart
ax[1].pie(y, labels=x, colors=pal, autopct='%1.1f%%')

#legend and title
plt.legend(bbox_to_anchor=(1, 1))
plt.suptitle('Device Protection')
plt.show()

tech_support_counts = df['TechSupport'].value_counts()
x = tech_support_counts.index
y = tech_support_counts.values

fig, ax = plt.subplots(1, 2, figsize=(15, 8))

#bar plot
sns.set(style="dark", color_codes=True)
pal = sns.color_palette("Set2", len(tech_support_counts))
sns.barplot(x=x, y=y, palette=pal[::-1], ax=ax[0])

for p in ax[0].patches:
    ax[0].annotate(f'{p.get_height():.0f}', (p.get_x() + p.get_width() / 2., p.get_height()))

ax[0].set_xlabel('TechSupport')

#pie chart
ax[1].pie(y, labels=x, colors=pal, autopct='%1.1f%%')

#legend and title
plt.legend(bbox_to_anchor=(1, 1))
plt.suptitle('TechSupport')
plt.show()

streaming_tv_counts = df['StreamingTV'].value_counts()
x = streaming_tv_counts.index
y = streaming_tv_counts.values

fig, ax = plt.subplots(1, 2, figsize=(15, 8))

#bar plot
sns.set(style="dark", color_codes=True)
pal = sns.color_palette("Set2", len(streaming_tv_counts))
sns.barplot(x=x, y=y, palette=pal[::-1], ax=ax[0])

for p in ax[0].patches:
    ax[0].annotate(f'{p.get_height():.0f}', (p.get_x() + p.get_width() / 2., p.get_height()))

ax[0].set_xlabel('Streaming TV')

#pie chart
ax[1].pie(y, labels=x, colors=pal, autopct='%1.1f%%')

#legend and title
plt.legend(bbox_to_anchor=(1, 1))
plt.suptitle('Streaming TV')
plt.show()

streaming_movies_counts = df['StreamingMovies'].value_counts()
x = streaming_movies_counts.index
y = streaming_movies_counts.values

fig, ax = plt.subplots(1, 2, figsize=(15, 8))

#bar plot
sns.set(style="dark", color_codes=True)
pal = sns.color_palette("Set2", len(streaming_movies_counts))
sns.barplot(x=x, y=y, palette=pal[::-1], ax=ax[0])

for p in ax[0].patches:
    ax[0].annotate(f'{p.get_height():.0f}', (p.get_x() + p.get_width() / 2., p.get_height()))

ax[0].set_xlabel('Streaming Movies')

# Pie chart
ax[1].pie(y, labels=x, colors=pal, autopct='%1.1f%%')

#legend and title
plt.legend(bbox_to_anchor=(1, 1))
plt.suptitle('Streaming Movies')
plt.show()

contract_counts = df['Contract'].value_counts()
x = contract_counts.index
y = contract_counts.values

fig, ax = plt.subplots(1, 2, figsize=(15, 8))

#bar plot
sns.set(style="dark", color_codes=True)
pal = sns.color_palette("Set2", len(contract_counts))
sns.barplot(x=x, y=y, palette=pal[::-1], ax=ax[0])

for p in ax[0].patches:
    ax[0].annotate(f'{p.get_height():.0f}', (p.get_x() + p.get_width() / 2., p.get_height()))

ax[0].set_xlabel('Contract Type')

#pie chart
ax[1].pie(y, labels=x, colors=pal, autopct='%1.1f%%')

#legend and title
plt.legend(bbox_to_anchor=(1, 1))
plt.suptitle('Contract Types')
plt.show()

paperless_billing_counts = df['PaperlessBilling'].value_counts()
x = paperless_billing_counts.index
y = paperless_billing_counts.values

fig, ax = plt.subplots(1, 2, figsize=(15, 8))

#bar plot
sns.set(style="dark", color_codes=True)
pal = sns.color_palette("Set2", len(paperless_billing_counts))
sns.barplot(x=x, y=y, palette=pal[::-1], ax=ax[0])

for p in ax[0].patches:
    ax[0].annotate(f'{p.get_height():.0f}', (p.get_x() + p.get_width() / 2., p.get_height()))

ax[0].set_xlabel('Paperless Billing')

# Pie chart
ax[1].pie(y, labels=x, colors=pal, autopct='%1.1f%%')

#legend and title
plt.legend(bbox_to_anchor=(1, 1))
plt.suptitle('Paperless Billing')
plt.show()

payment_method_counts = df['PaymentMethod'].value_counts()
x = payment_method_counts.index
y = payment_method_counts.values

fig, ax = plt.subplots(1, 2, figsize=(20, 10))

#bar plot
sns.set(style="dark", color_codes=True)
pal = sns.color_palette("Set2", len(payment_method_counts))
sns.barplot(x=x, y=y, palette=pal[::-1], ax=ax[0])

for p in ax[0].patches:
    ax[0].annotate(f'{p.get_height():.0f}', (p.get_x() + p.get_width() / 2., p.get_height()))

ax[0].set_xlabel('Payment Method')

#pie chart
ax[1].pie(y, labels=x, colors=pal, autopct='%1.1f%%')

#legend and title
plt.legend(bbox_to_anchor=(1, 1))
plt.suptitle('Payment Method')
plt.show()

churn_counts = df['Churn'].value_counts()
x = churn_counts.index
y = churn_counts.values

fig, ax = plt.subplots(1, 2, figsize=(15, 8))

#bar plot
sns.set(style="dark", color_codes=True)
pal = sns.color_palette("Set2", len(churn_counts))
sns.barplot(x=x, y=y, palette=pal[::-1], ax=ax[0])

for p in ax[0].patches:
    ax[0].annotate(f'{p.get_height():.0f}', (p.get_x() + p.get_width() / 2., p.get_height()))

ax[0].set_xlabel('Churn Yes/No')

#pie chart
ax[1].pie(y, labels=x, colors=pal, autopct='%1.1f%%')

#legend and title
plt.legend(bbox_to_anchor=(1, 1))
plt.suptitle('Churn Yes/No')
plt.show()

"""NUMERICAL COLUMNS EXPLORATION"""

sns.histplot(x = df['tenure'],kde = True, sns.color_palette='Set2')
plt.show()

sns.histplot(x=df['tenure'], kde=True, color='red')
plt.show()

sns.histplot(x = df['MonthlyCharges'],kde = True, color='skyblue')
plt.show()

print(df.columns)



fig = px.sunburst(data_frame=df,
                  path=['gender', 'Churn'],
                  color='Churn',
                  title='Gender vs Churn'
                 )

fig.update_traces(textinfo='label+percent parent')
fig.update_layout(margin=dict(t=40, l=0, r=0, b=0))
fig.show()

fig = px.sunburst(data_frame=df,
                  path=['SeniorCitizen', 'Churn'],
                  color='Churn',
                  title='SeniorCitizen vs Churn'
                 )

fig.update_traces(textinfo='label+percent parent')
fig.update_layout(margin=dict(t=40, l=0, r=0, b=0))
fig.show()

fig = px.sunburst(data_frame=df,
                  path=['Partner', 'Churn'],
                  color='Churn',
                  title='Partner vs Churn'
                 )

fig.update_traces(textinfo='label+percent parent')
fig.update_layout(margin=dict(t=40, l=0, r=0, b=0))
fig.show()

fig = px.sunburst(data_frame=df,
                  path=['Dependents', 'Churn'],
                  color='Churn',
                  title='Dependents vs Churn'
                 )

fig.update_traces(textinfo='label+percent parent')
fig.update_layout(margin=dict(t=40, l=0, r=0, b=0))
fig.show()

fig = px.sunburst(data_frame=df,
                  path=['PhoneService', 'Churn'],
                  color='Churn',
                  title='PhoneService vs Churn'
                 )

fig.update_traces(textinfo='label+percent parent')
fig.update_layout(margin=dict(t=40, l=0, r=0, b=0))
fig.show()

fig = px.histogram(data_frame = df,
             x = "MultipleLines",
             color="Churn", title="MultipleLines vs Churn")

fig.show()

fig = px.histogram(data_frame = df,
             x = "InternetService",
             color="Churn", title="InternetService vs Churn")

fig.show()

fig = px.histogram(data_frame = df,
             x = "OnlineSecurity",
             color="Churn", title="OnlineSecurity vs Churn")

fig.show()

fig = px.histogram(data_frame = df,
             x = "OnlineBackup",
             color="Churn", title="OnlineBackup vs Churn")

fig.show()

fig = px.histogram(data_frame = df,
             x = "DeviceProtection",
             color="Churn", title="DeviceProtection vs Churn")

fig.show()

fig = px.histogram(data_frame = df,
             x = "TechSupport",
             color="Churn", title="TechSupport vs Churn")

fig.show()

fig = px.histogram(data_frame = df,
             x = "StreamingTV",
             color="Churn", title="StreamingTV vs Churn")

fig.show()

fig = px.histogram(data_frame = df,
             x = "StreamingMovies",
             color="Churn", title="StreamingMovies vs Churn")

fig.show()

fig = px.histogram(data_frame = df,
             x = "Contract",
             color="Churn", title="Contract vs Churn")

fig.show()

fig = px.histogram(data_frame = df,
             x = "PaperlessBilling",
             color="Churn", title="PaperlessBilling vs Churn")

fig.show()

fig = px.histogram(data_frame = df,
             x = "PaymentMethod",
             color="Churn", title="PaymentMethod vs Churn")

fig.show()

df['churn_rate'] = df['Churn'].replace("No", 0).replace("Yes", 1)
g = sns.FacetGrid(df, col="SeniorCitizen")
ax = g.map(sns.barplot, "gender", "churn_rate", palette = "Set2", order= ['Female', 'Male'])

fig, axis = plt.subplots(1, 2, figsize=(12, 4))

axis_titles = ["Has partner", "Has dependents"]
columns = ['Partner', 'Dependents']
axis_y = "percentage of customers"

for ax, col, title in zip(axis, columns, axis_titles):

    gp = df.groupby(col)["Churn"].value_counts(normalize=True).rename(axis_y).reset_index()

    #plotting
    sns.barplot(x=col, y=axis_y, hue='Churn', data=gp, ax=ax)
    ax.set_title(title)

plt.tight_layout()
plt.show()

def barplot_percentages(column, orient='v'):

    gp = df.groupby(column)["Churn"].value_counts(normalize=True).rename("percentage of customers").reset_index()

    if orient == 'h':
        sns.barplot(y=column, x="percentage of customers", hue='Churn', data=gp, orient=orient)
    else:
        sns.barplot(x=column, y="percentage of customers", hue='Churn', data=gp, orient=orient)

    plt.title(f"Percentage of customers by {column}")

plt.figure(figsize=(9, 4.5))
barplot_percentages("MultipleLines", orient='h')
plt.show()

def barplot_percentages(column, orient='v'):

    gp = df.groupby(column)["Churn"].value_counts(normalize=True).rename("percentage of customers").reset_index()

    if orient == 'h':
        sns.barplot(y=column, x="percentage of customers", hue='Churn', data=gp, orient=orient)
    else:
        sns.barplot(x=column, y="percentage of customers", hue='Churn', data=gp, orient=orient)

    plt.title(f"Percentage of customers by {column}")

plt.figure(figsize=(9, 4.5))
barplot_percentages("MultipleLines", orient='h')
plt.show()

def barplot_percentages(column, orient='v'):

    gp = df.groupby(column)["Churn"].value_counts(normalize=True).rename("percentage of customers").reset_index()

    if orient == 'h':
        sns.barplot(y=column, x="percentage of customers", hue='Churn', data=gp, orient=orient)
    else:
        sns.barplot(x=column, y="percentage of customers", hue='Churn', data=gp, orient=orient)

    plt.title(f"Percentage of customers by {column}")
    plt.tight_layout()

plt.figure(figsize=(9, 4.5))
barplot_percentages("InternetService", orient="h")
plt.show()

plt.figure(figsize=(9, 4.5))
ax = sns.barplot(x="InternetService", y="MonthlyCharges", hue="Churn", data=df)

plt.title("Monthly Charges by Internet Service and Churn")

plt.show()

cols = ["OnlineSecurity", "OnlineBackup", "DeviceProtection", "TechSupport", "StreamingTV", "StreamingMovies"]
df1 = df[(df.InternetService != "No") & (df.Churn == "Yes")]
df1 = pd.melt(df1[cols]).rename({'value': 'Has service'}, axis=1)
plt.figure(figsize=(10, 4.5))
ax = sns.countplot(data=df1, x='variable', hue='Has service', hue_order=['No', 'Yes'], palette="pastel")

ax.set(xlabel='Additional service', ylabel='Number of churns')
ax.set_title('Number of Churns by Additional Service and Service Status')

plt.show()

g = sns.FacetGrid(df, col="PaperlessBilling", height=4, aspect=.9)
ax = g.map(sns.barplot, "Contract", "churn_rate", palette = "Set2", order= ['Month-to-month', 'One year', 'Two year'])

plt.figure(figsize=(9, 4.5))
barplot_percentages("PaymentMethod", orient='h',)

train_cat_visual_1 = df.select_dtypes(
                     include = ['object', 'category']).columns.tolist()
train_cat_visual_1.remove('customerID')

sns.set_theme(rc = {'figure.dpi': 250, 'axes.labelsize': 7,
                    'axes.facecolor': '#f0eee9', 'grid.color': '#fffdfa',
                    'figure.facecolor': '#e8e6e1'}, font_scale = 0.55)

fig, ax = plt.subplots(6, 3, figsize = (6.5, 7.5))

for indx, (column, axes) in list(enumerate(list(zip(train_cat_visual_1,
                                                    ax.flatten())))):

    sns.countplot(ax = axes, x = df[column], hue = df['Churn'],
                  palette = 'crest', alpha = 0.8)

else:
    [axes.set_visible(False) for axes in ax.flatten()[indx + 1:]]

axes_legend = ax.flatten()

axes_legend[1].legend(title = 'Churn', loc = 'upper right')
axes_legend[2].legend(title = 'Churn', loc = 'upper right')

plt.tight_layout()
plt.show()

train_num_visual_0 = ['MonthlyCharges', 'tenure','TotalCharges']

"""OUTLIER ANALYSIS"""

columns_to_check = ['tenure', 'MonthlyCharges']

def count_outliers(data, col):
    q1 = data[col].quantile(0.25)
    q3 = data[col].quantile(0.75)
    iqr = q3 - q1
    lower_limit = q1 - 1.5 * iqr
    upper_limit = q3 + 1.5 * iqr

    outliers_below = data[data[col] < lower_limit][col].size
    outliers_above = data[data[col] > upper_limit][col].size
    total_outliers = outliers_below + outliers_above

    if total_outliers == 0:
        print(f"No outliers in {col}")
    else:
        print(f"There are outliers in {col}")
        print(f'Count of outliers: {total_outliers}')

for col in columns_to_check:
    count_outliers(df, col)

df.drop(['customerID','Churn'],axis = 1,inplace = True)

df

"""ON HOT ENCODING"""

df1=pd.get_dummies(data=df,columns=['gender', 'Partner', 'Dependents',
       'PhoneService', 'MultipleLines', 'InternetService', 'OnlineSecurity',
       'OnlineBackup', 'DeviceProtection', 'TechSupport', 'StreamingTV',
       'StreamingMovies', 'Contract', 'PaperlessBilling', 'PaymentMethod'],drop_first=True)
df1

df1 = df1[['SeniorCitizen', 'tenure', 'MonthlyCharges', 'TotalCharges',
        'gender_Male', 'Partner_Yes', 'Dependents_Yes',
       'PhoneService_Yes', 'MultipleLines_No phone service',
       'MultipleLines_Yes', 'InternetService_Fiber optic',
       'InternetService_No', 'OnlineSecurity_No internet service',
       'OnlineSecurity_Yes', 'OnlineBackup_No internet service',
       'OnlineBackup_Yes', 'DeviceProtection_No internet service',
       'DeviceProtection_Yes', 'TechSupport_No internet service',
       'TechSupport_Yes', 'StreamingTV_No internet service', 'StreamingTV_Yes',
       'StreamingMovies_No internet service', 'StreamingMovies_Yes',
       'Contract_One year', 'Contract_Two year', 'PaperlessBilling_Yes',
       'PaymentMethod_Credit card (automatic)',
       'PaymentMethod_Electronic check', 'PaymentMethod_Mailed check','churn_rate']]

df1

"""imputation - fill missing values in the "TotalCharges" column of DataFrame df1 with the mean of the existing values."""

import pandas as pd
import numpy as np
from sklearn.impute import SimpleImputer

# Replace empty strings with NaN
df1['TotalCharges'] = df1['TotalCharges'].replace(' ', np.nan)

# Imputation
imputer = SimpleImputer(missing_values=np.nan, strategy="mean")
df1.TotalCharges = imputer.fit_transform(df1["TotalCharges"].values.reshape(-1, 1))

#feature scaling
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import classification_report,confusion_matrix
scaler = StandardScaler()
scaler.fit(df1.drop(['churn_rate'],axis = 1))
scaled_features = scaler.transform(df1.drop('churn_rate',axis = 1))

#feature selection

from sklearn.model_selection import train_test_split
X = scaled_features
Y = df1['churn_rate']
X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size = 0.3,random_state=44)

"""Prediction Using Logistic Regression


```
# This is formatted as code
```


"""

from sklearn.linear_model import LogisticRegression
logmodel = LogisticRegression()
logmodel.fit(X_train,Y_train)

predR = logmodel.predict(X_test)

print(classification_report(Y_test,predR)) # Use predR instead of pred
print(confusion_matrix(Y_test,predR)) # Use predR instead of pred

logmodel.score(X_test,Y_test)

"""Prediction using Decision Tree"""

from sklearn.tree import DecisionTreeClassifier
dtc = DecisionTreeClassifier()
dtc.fit(X_train, Y_train)
y_pred = dtc.predict(X_test)

confusion_matrix(Y_test, y_pred)

print(classification_report(Y_test, y_pred))

from sklearn.metrics import accuracy_score
print(accuracy_score(Y_test, y_pred))

!sudo apt-get install texlive-xetex texlive-fonts-recommended texlive-plain-generic

!jupyter nbconvert --to pdf /content/surv_sparrow_churn_prediction.ipynb